#! /usr/bin/env python3
# Import ROS.
import rospy
# Import the API.
from iq_gnc.py_gnc_functions import *
# To print colours (optional).
from iq_gnc.PrintColours import *
from pygeodesy.geoids import GeoidPGM

_egm96 = GeoidPGM('/usr/share/GeographicLib/geoids/egm96-5.pgm', kind=-3)

def geoid_height(lat, lon):
    return _egm96.height(lat, lon)

def main():
    # Initializing ROS node.
    rospy.init_node("drone_controller", anonymous=True)

    # Create an object for the API.
    drone = gnc_api()
    # Wait for FCU connection.
    drone.wait4connect()
    # Wait for the mode to be switched.
    drone.wait4start()

    # Create local reference frame.
    drone.initialize_local_frame()

    drone.start_stream()

    # Request takeoff with an altitude of 3m
    drone.takeoff(2)

    rate = rospy.Rate(1)

    # Specify some global waypoints
    goals = [[51.76910,14.32358,drone.global_position.altitude],   # WP 1
            [51.76914,14.32360,drone.global_position.altitude],  # WP 2
            [51.76916,14.32351,drone.global_position.altitude],    # WP 3
            [51.76911,14.32350,drone.global_position.altitude],   # WP 4
            [51.76910,14.32358,drone.global_position.altitude]]  # Back to WP 1
    i = 0
    altitude = 3 #Altitude in meters

    while i < len(goals):

        lat=goals[i][0]
        lon=goals[i][1]

        height_correction = geoid_height(lat, lon)

        alt=goals[i][2] + altitude - height_correction

        rospy.loginfo(CYELLOW2 + "Current waypoints Lat: {} Long: {} Alt: {} Psi: {}".format(lat,lon,alt) + CEND)

        drone.set_global_destination(lat,lon,alt)

        rospy.sleep(10)

    drone.land()
    # Land after all waypoints is reached.
    rospy.loginfo(CGREEN2 + "All waypoints reached." + CEND)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        exit()
